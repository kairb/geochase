{"version":3,"sources":["components/Menu/Menu.js","components/Score/Score.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","randomClassName","color","display","flexDirection","alignItems","alignContent","Menu","setGameVisible","classes","Box","className","Button","onClick","score_inner","borderStyle","borderWidth","borderColor","backgroundColor","borderRadius","padding","minWidth","justifyContent","score_outer","Score","score","Game","useState","setScore","useEffect","setInterval","clearInterval","fullViewPortContainer","height","App","gameVisibile","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAIMA,EAAYC,aAAW,iBAAO,CAClCC,gBAAiB,CACfC,MAAO,QACPC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,aAAa,cAoBFC,EAdD,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eACRC,EAAUV,IAChB,OACI,kBAACW,EAAA,EAAD,CAAKC,UAAWF,EAAQR,iBAAxB,WAEE,kBAACS,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAQC,QAAS,kBAAIL,GAAe,KAApC,YCnBJT,EAAYC,YAAW,CAC3Bc,YAAY,CACVC,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,gBAAiB,MACjBC,aAAc,MACdC,QAAQ,MACRC,SAAU,OACVlB,QAAS,OACTmB,eAAgB,eAChBjB,WAAY,SACZH,MAAM,SAERqB,YAAY,CACVpB,QAAS,OACTmB,eAAgB,gBAChBjB,WAAY,SACZU,YAAa,QACbC,YAAa,MACbC,YAAa,OACbC,gBAAiB,YACjBC,aAAc,MACdC,QAAS,MACTC,SAAU,WAgBCG,EAZD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACRhB,EAAUV,IAChB,OACE,yBAAKY,UAAYF,EAAQc,aAAzB,QAEE,yBAAKZ,UAAaF,EAAQK,aACrBW,KCjBIC,EAjBF,WAAO,IAAD,EACSC,mBAAS,GADlB,mBACVF,EADU,KACHG,EADG,KASjB,OANAC,qBAAU,WAIR,OAHAC,aAAY,WACVF,GAAS,SAAAH,GAAK,OAAIA,EAAQ,OAHb,KAKP,kBAAKM,cALE,QAMf,IAEA,oCAEE,kBAAC,EAAD,CAAON,MAAQA,MCTf1B,EAAYC,aAAW,iBAAO,CAClCgC,sBAAuB,CACrB7B,QAAQ,OACRE,WAAW,SACXC,aAAa,SACbgB,eAAe,SACfW,OAAO,aAeIC,MAVd,WACE,IAAMzB,EAAUV,IADH,EAE0B4B,oBAAS,GAFnC,mBAENQ,EAFM,KAEQ3B,EAFR,KAGd,OACE,yBAAKG,UAAWF,EAAQuB,uBACpBG,EAAe,kBAAC,EAAD,MAAU,kBAAC,EAAD,CAAM3B,eAAgBA,MCVnC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fd75ba59.chunk.js","sourcesContent":["import React from 'react';\nimport { Box, Button, makeStyles } from '@material-ui/core';\n\n\nconst useStyles = makeStyles(() => ({\n  randomClassName: {\n    color: 'green',\n    display:'flex',\n    flexDirection:'column',\n    alignItems:'center',\n    alignContent:'center',\n  }\n}));\n\n\n \n const Menu = ({setGameVisible}) => {\n  const classes = useStyles();\n  return (\n      <Box className={classes.randomClassName}>\n        Geochase\n        <Box>\n          <Button onClick={()=>setGameVisible(true)}>\n            Start\n          </Button>\n        </Box>\n      </Box>\n  );\n}\n\nexport default Menu;","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  score_inner:{\n    borderStyle: 'inset',\n    borderWidth: '2px',\n    borderColor: 'grey',\n    backgroundColor: 'red',\n    borderRadius: '5px',\n    padding:'5px',\n    minWidth: '50px',\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    alignItems: 'centre',\n    color:'white'\n  },\n  score_outer:{\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    borderColor: 'grey',\n    backgroundColor: 'lightGray',\n    borderRadius: '5px',\n    padding: '5px',\n    minWidth: '110px'\n  }\n});\n\nconst Score = ({score}) => {\n  const classes = useStyles();\n  return(\n    <div className ={classes.score_outer}>\n        Score\n      <div className = {classes.score_inner}>\n          {score}\n      </div>\n    </div>\n  );\n}\n\nexport default Score;","import React, {useState, useEffect} from 'react';\nimport Score from '../Score'\n\nconst Game = () => {\n  const [score, setScore] = useState(0);\n  const interval = 1000;\n  useEffect(() => {\n    setInterval(() =>{\n      setScore(score => score + 1)\n    },interval)\n    return (()=> clearInterval(interval))\n  },[])\n  return(\n    <div>\n      Game\n      <Score score ={score}/>\n    </div>\n  )\n}\n\nexport default Game;\n","import React, {useState} from 'react';\nimport Menu from './components/Menu';\nimport Game from './components/Game';\nimport { makeStyles } from '@material-ui/core';\n\n\nconst useStyles = makeStyles(() => ({\n  fullViewPortContainer: {\n    display:'flex',\n    alignItems:'center',\n    alignContent:'center',\n    justifyContent:'center',\n    height:'100vh'\n  }\n      \n}));\n\n function App() {\n   const classes = useStyles();\n   const [gameVisibile, setGameVisible] = useState(false);\n  return (\n    <div className={classes.fullViewPortContainer}>\n      {(gameVisibile)? <Game />: <Menu setGameVisible={setGameVisible} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}